@page
@model Aeon_Web.Areas.Identity.Pages.Account.Profile.Project.FormModel

@{
    var isEdit = Model.Input.IsEdit;
    ViewData["Title"] = isEdit ? "Edit Job Vacancy" : "Create Job Vacancy";
}

<link rel="stylesheet" href="~/css/areas/identity/account/profile/project/form.css"/>
<link rel="stylesheet" href="~/css/areas/project/star.css"/>
<link rel="stylesheet" href="~/css/areas/project/switch.css"/>
<script src="~/js/render-stars.js"></script>

<partial name="_StatusMessage" for="StatusMessage"/>

<section class="form-container">
    <h1>@(isEdit ? "Редактирование проекта" : "Создать новый проект")</h1>
    <form method="post">
        <input type="hidden" asp-for="Input.VacancyId"/>
        <input type="hidden" asp-for="Input.IsEdit"/>
        <input type="hidden" asp-for="IsHaveVisibleResume"/>
        <div class="form-group">
            <label>Заголовок</label>
            <input asp-for="Input.Title" class="input" placeholder="Название проекта"/>
        </div>

        <div class="form-group">
            <label>Сложность проекта</label>
            <div class="star-rating" id="starRating">
                <div class="stars">
                    <span class="star" data-value="1"></span>
                    <span class="star" data-value="2"></span>
                    <span class="star" data-value="3"></span>
                    <span class="star" data-value="4"></span>
                    <span class="star" data-value="5"></span>
                </div>
            </div>
            <input type="hidden" id="difficulty" asp-for="Input.DifficultyLevel" value="@Model.Input.DifficultyLevel"/>
        </div>

        <div class="toggle-container mt-2">
            <label class="toggle-label" asp-for="Input.IsVisible">Показывать проект</label>
            <label class="toggle-switch">
                <input type="checkbox" asp-for="Input.IsVisible">
                <span class="slider"></span>
            </label>
        </div>
        
        <div class="form-group">
            <label>Навыки (через запятую)</label>
            <input asp-for="Input.SkillsRaw" class="input" placeholder="C#, ASP.NET, Razor Pages"/>
        </div>

        <div class="form-group">
            <label>Описание</label>
            <textarea asp-for="Input.Description" class="input textarea" rows="5" placeholder=""></textarea>
        </div>

        <div class="form-group">
            <label>Email для связи</label>
            <input asp-for="Input.Email" class="input" placeholder="hr@company.com"/>
        </div>

        <div class="form-group">
            <label>Телефон для связи</label>
            <input asp-for="Input.Phone" class="input" placeholder="+1 234 567 89"/>
        </div>

        <div class="form-group">
            <label>Сайт</label>
            <input asp-for="Input.Website" class="input" placeholder="site.com"/>
        </div>
        
        <div class="form-actions">
            <button class="btn-primary" type="submit">@(isEdit ? "Обновить" : "Создать")</button>
            <a class="btn-secondary" asp-area="Identity"
               asp-page="/Account/Profile/Index">Отмена</a>
        </div>
    </form>
</section>

<script>
    const ratingEl = document.getElementById("starRating");
    const input = document.getElementById("difficulty");
    const stars = ratingEl.querySelectorAll(".star");

    // Устанавливает визуальное отображение в звездах от 0.5 до 5, а значение сохраняется как 1–10
    function setRatingFromValue(rawValue) {
        const starRating = rawValue / 2; // Преобразуем в 0.5–5
        stars.forEach((star, i) => {
            const full = i + 1;
            if (starRating >= full) {
                star.style.backgroundPosition = "left";
            } else if (starRating >= full - 0.5) {
                star.style.backgroundPosition = "center";
            } else {
                star.style.backgroundPosition = "right";
            }
        });
    }

    stars.forEach((star, i) => {
        star.addEventListener("click", (e) => {
            const rect = star.getBoundingClientRect();
            const isHalf = e.clientX - rect.left < rect.width / 2;
            const rating = isHalf ? i + 0.5 : i + 1;
            const scaledRating = rating * 2; // Преобразуем 0.5–5 → 1–10
            input.value = scaledRating;
            setRatingFromValue(scaledRating);
        });
    });

    ratingEl.addEventListener("mouseleave", () => {
        const value = parseInt(input.value) || 0;
        setRatingFromValue(value);
    });

    // Инициализация при загрузке
    setRatingFromValue(parseInt(input.value) || 0)
</script>

